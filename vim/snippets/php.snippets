snippet ec
	echo "${1:string}"${2};
snippet inc
	include '${1:file}';${2}
snippet inc1
	include_once '${1:file}';${2}
snippet req
	require '${1:file}';${2}
snippet req1
	require_once '${1:file}';${2}
snippet gl
	$GLOBALS['${1:variable}']${2: = }${3:something}${4:;}${5}
snippet G
	$GLOBALS['${1:variable}']
snippet $_ GET['...']
	$_GET['${1:variable}']${2}
snippet $_ POST['...']
	$_POST['${1:variable}']${2}
snippet $_ SERVER['...']
	$_SERVER['${1:variable}']${2}
snippet $_ SESSION['...']
	$_SESSION['${1:variable}']${2}
snippet def
	define('${1}'${2});${3}
snippet def?
	${1}defined('${2}')${3}
snippet wh
	while (${1})
		${2}
snippet do
	do
	{
		${2:// code... }
	} while (${1:/* condition */});
snippet if
	if (${1})
		${2}
snippet ife
	if (${1})
		${2}
	else
		${3}
snippet els
	else
		${1}
snippet eif
	elseif (${1})
		${2}
snippet t
	$${1:retVal} = ${2:condition} ? ${3:a} : ${4:b};${5}
snippet switch
	switch ($${1:variable})
	{
		case '${2:value}':
			${3:// code...}
			break;
		${5}
		default:
			${4:// code...}
			break;
	}
snippet case
	case '${1:value}':
		${2:// code...}
		break;${3}
snippet for
	for ($${2:i} = 0; $$2 < ${1:count}; $$2${3:++})
		${4: // code...}
snippet fea
	foreach ($${1} as $${2})
		${3}
snippet foreachk
	foreach ($${1:variable} as $${2:key} => $${3:value})
		${4}
snippet arr
	$${1} = array(${2});
snippet ar
	array(${1})
snippet try
	try
	{
		${2}
	}
	catch (${1:Exception} $e)
	{
		${3}
	}
snippet lambda
	${1:static }function (${2:args}) use (${3:&$x, $y /*put vars in scope (closure) */})
	{
		${4}
	};
snippet vd
	var_dump(${1});
snippet vdd
	var_dump(${1}); die(${2:});
snippet ret
	return ${1};
snippet rett
	return true;
snippet retf
	return false;
snippet thr
	throw new Exception("${1}.");
snippet /*
	/**
	 * ${1}
	 */
snippet pub
	public $${1};
snippet pubs
	public static $${1};
snippet pro
	protected $${1};
snippet pros
	protected static $${1};
snippet pri
	private $${1};
snippet pris
	private static $${1};
snippet pubf
	public function ${1}(${2})
	{
		${3}
	}
snippet pubsf
	public static function ${1}(${2})
	{
		${3}
	}
snippet prof
	protected function ${1}(${2})
	{
		${3}
	}
snippet prosf
	protected static function ${1}(${2})
	{
		${3}
	}
snippet prif
	private function ${1}(${2})
	{
		${3}
	}
snippet prisf
	private static function ${1}(${2})
	{
		${3}
	}
snippet fun
	function ($${1}) { ${2} }
snippet cl
	namespace `Namespace()`;

	class `Filename()`
	{
		${1}
	}
snippet set
	public function set${1:Property}($${2:property})
	{
		$this->$2 = $$2;
	}
snippet get
	public function get${1:Property}()
	{
		return $this->${2:property};
	}
snippet setget
	public function set${1:Property}($${2:property})
	{
		$this->$2 = $$2;
	}

	public function get$1()
	{
		return $this->$2;
	}
snippet ent
	namespace `Namespace()`;

	use Doctrine\ORM\Mapping as ORM;

	/**
	 * @ORM\Entity
	 * @ORM\Table(name="${1:`substitute(substitute(Filename(), '\v^(.)', '\l\1', ''), '\v(\u)', '_\l\1', 'g')`s}")
	 */
	class `Filename()`
	{
		${2}
	}
snippet eid
	/**
	 * @ORM\Id
	 * @ORM\Column(type="integer")
	 * @ORM\GeneratedValue(strategy="AUTO")
	 */
	private $id;

	public function getId()
	{
		return $this->id;
	}${2}
snippet ecol
	/**
	 * @ORM\Column(type="${1:string}"${2})
	 */
	private $${3:col};${4}
